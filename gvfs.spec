#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
#
Name     : gvfs
Version  : 1.50.2
Release  : 72
URL      : https://download.gnome.org/sources/gvfs/1.50/gvfs-1.50.2.tar.xz
Source0  : https://download.gnome.org/sources/gvfs/1.50/gvfs-1.50.2.tar.xz
Summary  : No detailed summary available
Group    : Development/Tools
License  : GPL-3.0 LGPL-2.0
BuildRequires : buildreq-gnome
BuildRequires : buildreq-meson
BuildRequires : colord
BuildRequires : fuse-dev
BuildRequires : gvfs-dev
BuildRequires : libarchive-dev
BuildRequires : libcap-dev
BuildRequires : libgcrypt-dev
BuildRequires : libgdata-dev
BuildRequires : libgpg-error-dev
BuildRequires : libgphoto2-dev
BuildRequires : libmtp-dev
BuildRequires : openssh
BuildRequires : pkgconfig(fuse)
BuildRequires : pkgconfig(goa-1.0)
BuildRequires : pkgconfig(gtk+-3.0)
BuildRequires : pkgconfig(gudev-1.0)
BuildRequires : pkgconfig(libgdata)
BuildRequires : pkgconfig(libsecret-unstable)
BuildRequires : pkgconfig(libsoup-3.0)
BuildRequires : pkgconfig(polkit-gobject-1)
BuildRequires : pkgconfig(udisks2)
BuildRequires : python3-dev
BuildRequires : samba-dev
BuildRequires : valgrind

%description
# GVfs
GVfs is a userspace virtual filesystem implementation for GIO (a library
available in GLib). GVfs comes with a set of backends, including trash support,
SFTP, SMB, HTTP, DAV, and many others. GVfs also contains modules for GIO that
implement volume monitors and persistent metadata storage. There is also FUSE
support that provides limited access to the GVfs filesystems for applications
not using GIO.

%prep
%setup -q -n gvfs-1.50.2
cd %{_builddir}/gvfs-1.50.2

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1663965656
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -Os -fdata-sections -ffat-lto-objects -ffunction-sections -flto=auto -fno-semantic-interposition -fstack-protector-strong -fzero-call-used-regs=used "
export FCFLAGS="$FFLAGS -O3 -Os -fdata-sections -ffat-lto-objects -ffunction-sections -flto=auto -fno-semantic-interposition -fstack-protector-strong -fzero-call-used-regs=used "
export FFLAGS="$FFLAGS -O3 -Os -fdata-sections -ffat-lto-objects -ffunction-sections -flto=auto -fno-semantic-interposition -fstack-protector-strong -fzero-call-used-regs=used "
export CXXFLAGS="$CXXFLAGS -O3 -Os -fdata-sections -ffat-lto-objects -ffunction-sections -flto=auto -fno-semantic-interposition -fstack-protector-strong -fzero-call-used-regs=used "
CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" meson --libdir=lib64 --prefix=/usr --buildtype=plain -Ddnssd=false \
-Dafc=false \
-Dbluray=false \
-Dcdda=false \
-Dnfs=false \
-Dinstalled_tests=true  builddir
ninja -v -C builddir

%install
mkdir -p %{buildroot}/usr/share/package-licenses/gvfs
cp %{_builddir}/gvfs-%{version}/COPYING %{buildroot}/usr/share/package-licenses/gvfs/ec8f58b945698929990e5ab50ec5350ab184cfdd || :
cp %{_builddir}/gvfs-%{version}/daemon/trashlib/COPYING %{buildroot}/usr/share/package-licenses/gvfs/8624bcdae55baeef00cd11d5dfcfa60f68710a02 || :
DESTDIR=%{buildroot} ninja -C builddir install

%files
%defattr(-,root,root,-)
